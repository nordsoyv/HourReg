#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TimeForing.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Timeforing")]
	public partial class TimeforingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCode(Code instance);
    partial void UpdateCode(Code instance);
    partial void DeleteCode(Code instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertHourReg(HourReg instance);
    partial void UpdateHourReg(HourReg instance);
    partial void DeleteHourReg(HourReg instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertStory(Story instance);
    partial void UpdateStory(Story instance);
    partial void DeleteStory(Story instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertSprint(Sprint instance);
    partial void UpdateSprint(Sprint instance);
    partial void DeleteSprint(Sprint instance);
    #endregion
		
		public TimeforingDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TimeforingConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TimeforingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimeforingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimeforingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimeforingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Code> Codes
		{
			get
			{
				return this.GetTable<Code>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<HourReg> HourRegs
		{
			get
			{
				return this.GetTable<HourReg>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Story> Stories
		{
			get
			{
				return this.GetTable<Story>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Sprint> Sprints
		{
			get
			{
				return this.GetTable<Sprint>();
			}
		}
	}
	
	[Table()]
	public partial class Code : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodeID;
		
		private int _CodeNumber;
		
		private int _ProjectID;
		
		private string _Name;
		
		private EntitySet<Task> _Tasks;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeIDChanging(int value);
    partial void OnCodeIDChanged();
    partial void OnCodeNumberChanging(int value);
    partial void OnCodeNumberChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Code()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[Column(Storage="_CodeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodeID
		{
			get
			{
				return this._CodeID;
			}
			set
			{
				if ((this._CodeID != value))
				{
					this.OnCodeIDChanging(value);
					this.SendPropertyChanging();
					this._CodeID = value;
					this.SendPropertyChanged("CodeID");
					this.OnCodeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CodeNumber", DbType="Int NOT NULL")]
		public int CodeNumber
		{
			get
			{
				return this._CodeNumber;
			}
			set
			{
				if ((this._CodeNumber != value))
				{
					this.OnCodeNumberChanging(value);
					this.SendPropertyChanging();
					this._CodeNumber = value;
					this.SendPropertyChanged("CodeNumber");
					this.OnCodeNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Code_Task", Storage="_Tasks", ThisKey="CodeID", OtherKey="CodeID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[Association(Name="Project_Code", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Codes.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Codes.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Code = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Code = null;
		}
	}
	
	[Table()]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Name;
		
		private EntitySet<HourReg> _HourRegs;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public User()
		{
			this._HourRegs = new EntitySet<HourReg>(new Action<HourReg>(this.attach_HourRegs), new Action<HourReg>(this.detach_HourRegs));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="User_HourReg", Storage="_HourRegs", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<HourReg> HourRegs
		{
			get
			{
				return this._HourRegs;
			}
			set
			{
				this._HourRegs.Assign(value);
			}
		}
		
		[Association(Name="User_Task", Storage="_Tasks", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HourRegs(HourReg entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_HourRegs(HourReg entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table()]
	public partial class HourReg : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HourRegID;
		
		private int _TaskID;
		
		private int _UserID;
		
		private int _SprintID;
		
		private double _TimeSpent;
		
		private System.DateTime _Date;
		
		private double _TimeLeft;
		
		private EntityRef<User> _User;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<Sprint> _Sprint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHourRegIDChanging(int value);
    partial void OnHourRegIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnSprintIDChanging(int value);
    partial void OnSprintIDChanged();
    partial void OnTimeSpentChanging(double value);
    partial void OnTimeSpentChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTimeLeftChanging(double value);
    partial void OnTimeLeftChanged();
    #endregion
		
		public HourReg()
		{
			this._User = default(EntityRef<User>);
			this._Task = default(EntityRef<Task>);
			this._Sprint = default(EntityRef<Sprint>);
			OnCreated();
		}
		
		[Column(Storage="_HourRegID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HourRegID
		{
			get
			{
				return this._HourRegID;
			}
			set
			{
				if ((this._HourRegID != value))
				{
					this.OnHourRegIDChanging(value);
					this.SendPropertyChanging();
					this._HourRegID = value;
					this.SendPropertyChanged("HourRegID");
					this.OnHourRegIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_SprintID", DbType="Int NOT NULL")]
		public int SprintID
		{
			get
			{
				return this._SprintID;
			}
			set
			{
				if ((this._SprintID != value))
				{
					if (this._Sprint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSprintIDChanging(value);
					this.SendPropertyChanging();
					this._SprintID = value;
					this.SendPropertyChanged("SprintID");
					this.OnSprintIDChanged();
				}
			}
		}
		
		[Column(Storage="_TimeSpent", DbType="Float NOT NULL")]
		public double TimeSpent
		{
			get
			{
				return this._TimeSpent;
			}
			set
			{
				if ((this._TimeSpent != value))
				{
					this.OnTimeSpentChanging(value);
					this.SendPropertyChanging();
					this._TimeSpent = value;
					this.SendPropertyChanged("TimeSpent");
					this.OnTimeSpentChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_TimeLeft", DbType="Float NOT NULL")]
		public double TimeLeft
		{
			get
			{
				return this._TimeLeft;
			}
			set
			{
				if ((this._TimeLeft != value))
				{
					this.OnTimeLeftChanging(value);
					this.SendPropertyChanging();
					this._TimeLeft = value;
					this.SendPropertyChanged("TimeLeft");
					this.OnTimeLeftChanged();
				}
			}
		}
		
		[Association(Name="User_HourReg", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.HourRegs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.HourRegs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Task_HourReg", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.HourRegs.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.HourRegs.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[Association(Name="Sprint_HourReg", Storage="_Sprint", ThisKey="SprintID", OtherKey="SprintID", IsForeignKey=true)]
		public Sprint Sprint
		{
			get
			{
				return this._Sprint.Entity;
			}
			set
			{
				Sprint previousValue = this._Sprint.Entity;
				if (((previousValue != value) 
							|| (this._Sprint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sprint.Entity = null;
						previousValue.HourRegs.Remove(this);
					}
					this._Sprint.Entity = value;
					if ((value != null))
					{
						value.HourRegs.Add(this);
						this._SprintID = value.SprintID;
					}
					else
					{
						this._SprintID = default(int);
					}
					this.SendPropertyChanged("Sprint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private string _Name;
		
		private EntitySet<Code> _Codes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Project()
		{
			this._Codes = new EntitySet<Code>(new Action<Code>(this.attach_Codes), new Action<Code>(this.detach_Codes));
			OnCreated();
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Project_Code", Storage="_Codes", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<Code> Codes
		{
			get
			{
				return this._Codes;
			}
			set
			{
				this._Codes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Codes(Code entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Codes(Code entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[Table(Name="Stories")]
	public partial class Story : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StoryID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStoryIDChanging(int value);
    partial void OnStoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Story()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[Column(Storage="_StoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StoryID
		{
			get
			{
				return this._StoryID;
			}
			set
			{
				if ((this._StoryID != value))
				{
					this.OnStoryIDChanging(value);
					this.SendPropertyChanging();
					this._StoryID = value;
					this.SendPropertyChanged("StoryID");
					this.OnStoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Story_Task", Storage="_Tasks", ThisKey="StoryID", OtherKey="StoryID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Story = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Story = null;
		}
	}
	
	[Table()]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private string _Name;
		
		private System.Nullable<double> _TimeLeft;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _CodeID;
		
		private System.Nullable<int> _SprintID;
		
		private string _Description;
		
		private System.Nullable<double> _OrgEstimate;
		
		private System.Nullable<System.DateTime> _Created;
		
		private int _StoryID;
		
		private EntitySet<HourReg> _HourRegs;
		
		private EntityRef<Code> _Code;
		
		private EntityRef<Story> _Story;
		
		private EntityRef<User> _User;
		
		private EntityRef<Sprint> _Sprint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimeLeftChanging(System.Nullable<double> value);
    partial void OnTimeLeftChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnCodeIDChanging(System.Nullable<int> value);
    partial void OnCodeIDChanged();
    partial void OnSprintIDChanging(System.Nullable<int> value);
    partial void OnSprintIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOrgEstimateChanging(System.Nullable<double> value);
    partial void OnOrgEstimateChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnStoryIDChanging(int value);
    partial void OnStoryIDChanged();
    #endregion
		
		public Task()
		{
			this._HourRegs = new EntitySet<HourReg>(new Action<HourReg>(this.attach_HourRegs), new Action<HourReg>(this.detach_HourRegs));
			this._Code = default(EntityRef<Code>);
			this._Story = default(EntityRef<Story>);
			this._User = default(EntityRef<User>);
			this._Sprint = default(EntityRef<Sprint>);
			OnCreated();
		}
		
		[Column(Storage="_TaskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_TimeLeft", DbType="Float")]
		public System.Nullable<double> TimeLeft
		{
			get
			{
				return this._TimeLeft;
			}
			set
			{
				if ((this._TimeLeft != value))
				{
					this.OnTimeLeftChanging(value);
					this.SendPropertyChanging();
					this._TimeLeft = value;
					this.SendPropertyChanged("TimeLeft");
					this.OnTimeLeftChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_CodeID", DbType="Int")]
		public System.Nullable<int> CodeID
		{
			get
			{
				return this._CodeID;
			}
			set
			{
				if ((this._CodeID != value))
				{
					if (this._Code.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeIDChanging(value);
					this.SendPropertyChanging();
					this._CodeID = value;
					this.SendPropertyChanged("CodeID");
					this.OnCodeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SprintID", DbType="Int")]
		public System.Nullable<int> SprintID
		{
			get
			{
				return this._SprintID;
			}
			set
			{
				if ((this._SprintID != value))
				{
					if (this._Sprint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSprintIDChanging(value);
					this.SendPropertyChanging();
					this._SprintID = value;
					this.SendPropertyChanged("SprintID");
					this.OnSprintIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_OrgEstimate", DbType="Float")]
		public System.Nullable<double> OrgEstimate
		{
			get
			{
				return this._OrgEstimate;
			}
			set
			{
				if ((this._OrgEstimate != value))
				{
					this.OnOrgEstimateChanging(value);
					this.SendPropertyChanging();
					this._OrgEstimate = value;
					this.SendPropertyChanged("OrgEstimate");
					this.OnOrgEstimateChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_StoryID", DbType="Int NOT NULL")]
		public int StoryID
		{
			get
			{
				return this._StoryID;
			}
			set
			{
				if ((this._StoryID != value))
				{
					if (this._Story.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoryIDChanging(value);
					this.SendPropertyChanging();
					this._StoryID = value;
					this.SendPropertyChanged("StoryID");
					this.OnStoryIDChanged();
				}
			}
		}
		
		[Association(Name="Task_HourReg", Storage="_HourRegs", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<HourReg> HourRegs
		{
			get
			{
				return this._HourRegs;
			}
			set
			{
				this._HourRegs.Assign(value);
			}
		}
		
		[Association(Name="Code_Task", Storage="_Code", ThisKey="CodeID", OtherKey="CodeID", IsForeignKey=true)]
		public Code Code
		{
			get
			{
				return this._Code.Entity;
			}
			set
			{
				Code previousValue = this._Code.Entity;
				if (((previousValue != value) 
							|| (this._Code.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Code.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Code.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._CodeID = value.CodeID;
					}
					else
					{
						this._CodeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Code");
				}
			}
		}
		
		[Association(Name="Story_Task", Storage="_Story", ThisKey="StoryID", OtherKey="StoryID", IsForeignKey=true)]
		public Story Story
		{
			get
			{
				return this._Story.Entity;
			}
			set
			{
				Story previousValue = this._Story.Entity;
				if (((previousValue != value) 
							|| (this._Story.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Story.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Story.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._StoryID = value.StoryID;
					}
					else
					{
						this._StoryID = default(int);
					}
					this.SendPropertyChanged("Story");
				}
			}
		}
		
		[Association(Name="User_Task", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Sprint_Task", Storage="_Sprint", ThisKey="SprintID", OtherKey="SprintID", IsForeignKey=true)]
		public Sprint Sprint
		{
			get
			{
				return this._Sprint.Entity;
			}
			set
			{
				Sprint previousValue = this._Sprint.Entity;
				if (((previousValue != value) 
							|| (this._Sprint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sprint.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Sprint.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._SprintID = value.SprintID;
					}
					else
					{
						this._SprintID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sprint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HourRegs(HourReg entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_HourRegs(HourReg entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[Table(Name="dbo.Sprint")]
	public partial class Sprint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SprintID;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<double> _HoursInSprint;
		
		private bool _Archived;
		
		private EntitySet<HourReg> _HourRegs;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSprintIDChanging(int value);
    partial void OnSprintIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnHoursInSprintChanging(System.Nullable<double> value);
    partial void OnHoursInSprintChanged();
    partial void OnArchivedChanging(bool value);
    partial void OnArchivedChanged();
    #endregion
		
		public Sprint()
		{
			this._HourRegs = new EntitySet<HourReg>(new Action<HourReg>(this.attach_HourRegs), new Action<HourReg>(this.detach_HourRegs));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[Column(Storage="_SprintID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SprintID
		{
			get
			{
				return this._SprintID;
			}
			set
			{
				if ((this._SprintID != value))
				{
					this.OnSprintIDChanging(value);
					this.SendPropertyChanging();
					this._SprintID = value;
					this.SendPropertyChanged("SprintID");
					this.OnSprintIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="datetime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="datetime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_HoursInSprint", DbType="Float")]
		public System.Nullable<double> HoursInSprint
		{
			get
			{
				return this._HoursInSprint;
			}
			set
			{
				if ((this._HoursInSprint != value))
				{
					this.OnHoursInSprintChanging(value);
					this.SendPropertyChanging();
					this._HoursInSprint = value;
					this.SendPropertyChanged("HoursInSprint");
					this.OnHoursInSprintChanged();
				}
			}
		}
		
		[Column(Storage="_Archived", DbType="Bit NOT NULL")]
		public bool Archived
		{
			get
			{
				return this._Archived;
			}
			set
			{
				if ((this._Archived != value))
				{
					this.OnArchivedChanging(value);
					this.SendPropertyChanging();
					this._Archived = value;
					this.SendPropertyChanged("Archived");
					this.OnArchivedChanged();
				}
			}
		}
		
		[Association(Name="Sprint_HourReg", Storage="_HourRegs", ThisKey="SprintID", OtherKey="SprintID")]
		public EntitySet<HourReg> HourRegs
		{
			get
			{
				return this._HourRegs;
			}
			set
			{
				this._HourRegs.Assign(value);
			}
		}
		
		[Association(Name="Sprint_Task", Storage="_Tasks", ThisKey="SprintID", OtherKey="SprintID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HourRegs(HourReg entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = this;
		}
		
		private void detach_HourRegs(HourReg entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = null;
		}
	}
}
#pragma warning restore 1591
